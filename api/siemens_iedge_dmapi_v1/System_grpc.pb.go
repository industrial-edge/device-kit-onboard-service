//
// Copyright (c) Siemens 2023
// Licensed under the MIT license
// See LICENSE file in the top-level directory

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: System.proto

package siemens_iedge_dmapi_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SystemService_RestartDevice_FullMethodName       = "/siemens.iedge.dmapi.system.v1.SystemService/RestartDevice"
	SystemService_ShutdownDevice_FullMethodName      = "/siemens.iedge.dmapi.system.v1.SystemService/ShutdownDevice"
	SystemService_HardReset_FullMethodName           = "/siemens.iedge.dmapi.system.v1.SystemService/HardReset"
	SystemService_GetModelNumber_FullMethodName      = "/siemens.iedge.dmapi.system.v1.SystemService/GetModelNumber"
	SystemService_GetFirmwareInfo_FullMethodName     = "/siemens.iedge.dmapi.system.v1.SystemService/GetFirmwareInfo"
	SystemService_GetResourceStats_FullMethodName    = "/siemens.iedge.dmapi.system.v1.SystemService/GetResourceStats"
	SystemService_GetLimits_FullMethodName           = "/siemens.iedge.dmapi.system.v1.SystemService/GetLimits"
	SystemService_GetCustomSettings_FullMethodName   = "/siemens.iedge.dmapi.system.v1.SystemService/GetCustomSettings"
	SystemService_ApplyCustomSettings_FullMethodName = "/siemens.iedge.dmapi.system.v1.SystemService/ApplyCustomSettings"
	SystemService_GetLogFile_FullMethodName          = "/siemens.iedge.dmapi.system.v1.SystemService/GetLogFile"
)

// SystemServiceClient is the client API for SystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemServiceClient interface {
	// Restarts the device
	RestartDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ShutsDown the device.
	ShutdownDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Performs host side actions in addition to edge-core for hard reset. e.g: cleaning hard-reset flag(mandatory) ,custom device builder steps(optional) and finally reboots the system(mandatory).
	HardReset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns model number (mlfb) for siemens or any type model for 3rd party vendors.
	GetModelNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModelNumber, error)
	// Returns firmware information of currently installed firmware
	GetFirmwareInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FirmwareInfo, error)
	// Returns current Cpu, Memory, Uptime and Storage usage
	GetResourceStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Stats, error)
	// Returns limits for how many applications and how much cpu, ram and storage should be available for applications.
	GetLimits(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Limits, error)
	// Returns device specific custom settings.
	GetCustomSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*anypb.Any, error)
	// Applies device specific custom settings.
	ApplyCustomSettings(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Collects and compress all Journald logs (mandatory) from host ,(plus optional device specific log/report) and then returns a single file path for this new log archive.
	GetLogFile(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type systemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemServiceClient(cc grpc.ClientConnInterface) SystemServiceClient {
	return &systemServiceClient{cc}
}

func (c *systemServiceClient) RestartDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SystemService_RestartDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ShutdownDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SystemService_ShutdownDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) HardReset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SystemService_HardReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetModelNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModelNumber, error) {
	out := new(ModelNumber)
	err := c.cc.Invoke(ctx, SystemService_GetModelNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetFirmwareInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FirmwareInfo, error) {
	out := new(FirmwareInfo)
	err := c.cc.Invoke(ctx, SystemService_GetFirmwareInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetResourceStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, SystemService_GetResourceStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetLimits(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Limits, error) {
	out := new(Limits)
	err := c.cc.Invoke(ctx, SystemService_GetLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetCustomSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, SystemService_GetCustomSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ApplyCustomSettings(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SystemService_ApplyCustomSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetLogFile(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, SystemService_GetLogFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServiceServer is the server API for SystemService service.
// All implementations must embed UnimplementedSystemServiceServer
// for forward compatibility
type SystemServiceServer interface {
	// Restarts the device
	RestartDevice(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// ShutsDown the device.
	ShutdownDevice(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Performs host side actions in addition to edge-core for hard reset. e.g: cleaning hard-reset flag(mandatory) ,custom device builder steps(optional) and finally reboots the system(mandatory).
	HardReset(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Returns model number (mlfb) for siemens or any type model for 3rd party vendors.
	GetModelNumber(context.Context, *emptypb.Empty) (*ModelNumber, error)
	// Returns firmware information of currently installed firmware
	GetFirmwareInfo(context.Context, *emptypb.Empty) (*FirmwareInfo, error)
	// Returns current Cpu, Memory, Uptime and Storage usage
	GetResourceStats(context.Context, *emptypb.Empty) (*Stats, error)
	// Returns limits for how many applications and how much cpu, ram and storage should be available for applications.
	GetLimits(context.Context, *emptypb.Empty) (*Limits, error)
	// Returns device specific custom settings.
	GetCustomSettings(context.Context, *emptypb.Empty) (*anypb.Any, error)
	// Applies device specific custom settings.
	ApplyCustomSettings(context.Context, *anypb.Any) (*emptypb.Empty, error)
	// Collects and compress all Journald logs (mandatory) from host ,(plus optional device specific log/report) and then returns a single file path for this new log archive.
	GetLogFile(context.Context, *LogRequest) (*LogResponse, error)
	mustEmbedUnimplementedSystemServiceServer()
}

// UnimplementedSystemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemServiceServer struct {
}

func (UnimplementedSystemServiceServer) RestartDevice(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartDevice not implemented")
}
func (UnimplementedSystemServiceServer) ShutdownDevice(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownDevice not implemented")
}
func (UnimplementedSystemServiceServer) HardReset(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HardReset not implemented")
}
func (UnimplementedSystemServiceServer) GetModelNumber(context.Context, *emptypb.Empty) (*ModelNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelNumber not implemented")
}
func (UnimplementedSystemServiceServer) GetFirmwareInfo(context.Context, *emptypb.Empty) (*FirmwareInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirmwareInfo not implemented")
}
func (UnimplementedSystemServiceServer) GetResourceStats(context.Context, *emptypb.Empty) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceStats not implemented")
}
func (UnimplementedSystemServiceServer) GetLimits(context.Context, *emptypb.Empty) (*Limits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimits not implemented")
}
func (UnimplementedSystemServiceServer) GetCustomSettings(context.Context, *emptypb.Empty) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomSettings not implemented")
}
func (UnimplementedSystemServiceServer) ApplyCustomSettings(context.Context, *anypb.Any) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCustomSettings not implemented")
}
func (UnimplementedSystemServiceServer) GetLogFile(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogFile not implemented")
}
func (UnimplementedSystemServiceServer) mustEmbedUnimplementedSystemServiceServer() {}

// UnsafeSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServiceServer will
// result in compilation errors.
type UnsafeSystemServiceServer interface {
	mustEmbedUnimplementedSystemServiceServer()
}

func RegisterSystemServiceServer(s grpc.ServiceRegistrar, srv SystemServiceServer) {
	s.RegisterService(&SystemService_ServiceDesc, srv)
}

func _SystemService_RestartDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).RestartDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_RestartDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).RestartDevice(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ShutdownDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ShutdownDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_ShutdownDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ShutdownDevice(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_HardReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).HardReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_HardReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).HardReset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetModelNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetModelNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetModelNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetModelNumber(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetFirmwareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetFirmwareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetFirmwareInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetFirmwareInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetResourceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetResourceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetResourceStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetResourceStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetLimits(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetCustomSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetCustomSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetCustomSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetCustomSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ApplyCustomSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ApplyCustomSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_ApplyCustomSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ApplyCustomSettings(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetLogFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetLogFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetLogFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetLogFile(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemService_ServiceDesc is the grpc.ServiceDesc for SystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "siemens.iedge.dmapi.system.v1.SystemService",
	HandlerType: (*SystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RestartDevice",
			Handler:    _SystemService_RestartDevice_Handler,
		},
		{
			MethodName: "ShutdownDevice",
			Handler:    _SystemService_ShutdownDevice_Handler,
		},
		{
			MethodName: "HardReset",
			Handler:    _SystemService_HardReset_Handler,
		},
		{
			MethodName: "GetModelNumber",
			Handler:    _SystemService_GetModelNumber_Handler,
		},
		{
			MethodName: "GetFirmwareInfo",
			Handler:    _SystemService_GetFirmwareInfo_Handler,
		},
		{
			MethodName: "GetResourceStats",
			Handler:    _SystemService_GetResourceStats_Handler,
		},
		{
			MethodName: "GetLimits",
			Handler:    _SystemService_GetLimits_Handler,
		},
		{
			MethodName: "GetCustomSettings",
			Handler:    _SystemService_GetCustomSettings_Handler,
		},
		{
			MethodName: "ApplyCustomSettings",
			Handler:    _SystemService_ApplyCustomSettings_Handler,
		},
		{
			MethodName: "GetLogFile",
			Handler:    _SystemService_GetLogFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "System.proto",
}
